<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于windows的吐槽</title>
      <link href="/2022/09/28/%E5%85%B3%E4%BA%8Ewindows%E7%9A%84%E5%90%90%E6%A7%BD/"/>
      <url>/2022/09/28/%E5%85%B3%E4%BA%8Ewindows%E7%9A%84%E5%90%90%E6%A7%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>最近突发奇想，想要在windows上跑一些视觉的东西，结果被狠狠地折磨了……</p><h1 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a>opencv</h1><p>首先是opencv的源码编译。</p><p>在大一的时候，因为一些原因自学了一下opencv3,并且当时使用的IDE是<code>Visual Studio 2019</code>。</p><p>VS虽然笨重，但是对于C++开发的一些相关依赖它确实很全面，只需要在安装时勾选一些组件即可。OpenCV的二进制文件也可以直接使用。</p><p>时隔大半年，自认为比较熟悉Linux环境配置的我想要在windows上也配置上opencv的环境。</p><p>因为想要挑战自己，所以就没有去用集成环境了。自己下载了CMake和mingw，打算将vscode打造成视觉处理的一个IDE。</p><p>但是！！从官网下载下来的库是有问题的。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在使用CMake编译源码的时候，有一些组件是需要从github上下载的。但是，有关下载这一部分的配置文件已经过期了，原来那个仓库的分支已经变了，导致组件无法直接下载。</p><p>需要自己到github上下载然后复制到指定目录。</p><p>后面我想了想直接修改了配置文件里的URL，文件是正常下载了但是CMake还是有报错，从日志上没有看出来问题所在。</p><p>再后面看了几篇博客，有一个人说可以直接在CMake里不勾选那个组件，opencv除了一些核心的东西都是可以后续再添加的。</p><p>然后我果断地丢弃了ADE组件。顺利生成，顺利编译^^</p><p>结果vscode还是不可以运行opencv的项目。可以生成exe但是一执行就报错。看报错信息还是缺少了一部分组件。</p><p><img src="https://s2.loli.net/2022/09/27/udy5iWTrvowcI9B.png" alt="痛苦面具"></p><p>在两次编译失败，三次执行失败之后，我认输了，<del>早知道还是VS</del>。</p><h1 id="yolov4"><a href="#yolov4" class="headerlink" title="yolov4"></a>yolov4</h1><p>在配置yolov4的时候我算是彻底看明白了，只要是涉及到编译的东西，在windows上都是困难重重的（还是因为我太菜了）。</p><p>依旧是CMake，CMake找不到CUDA。</p><p>为什么呢，为什么他会找不到呢（哭泣）。</p><p>之后又找到了一种方案，用VS去重新生成YOLO。</p><p>可喜可贺，又报错了。蛤蛤。</p><p>开始的报错是</p><pre><code>&gt;nvcc fatal   : Unsupported gpu architecture &#39;compute_30&#39; vs</code></pre><p>后面查了一下，原来是算力与显卡不匹配，用VS的话需要在VS里面改CUDA相关的配置，CMake编译的话需要更改makefile文件</p><p>然而我改了之后也还是有问题，蛤蛤😄</p><pre><code>error MSB3721: 命令“&quot;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.6\bin\nvcc.exe&quot; -gencode=a</code></pre><p>新的报错长这个样子，搜了一下，都是说是路径问题或者算力不匹配，和我的问题不一样呢</p><p><del>至此，放弃windows环境配置</del></p><blockquote><p>后面听朋友说yolov5配置很简单（不用CUDA的话），下次试一试</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 吐槽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吐槽 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ros同工作空间下调用消息包</title>
      <link href="/2022/09/07/ros%E5%90%8C%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E4%B8%8B%E8%B0%83%E7%94%A8%E6%B6%88%E6%81%AF%E5%8C%85/"/>
      <url>/2022/09/07/ros%E5%90%8C%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E4%B8%8B%E8%B0%83%E7%94%A8%E6%B6%88%E6%81%AF%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>昨天也是被这个玩意儿折磨了一下午，主要是配置CMakeLists和package的问题</p><h1 id="被调用包"><a href="#被调用包" class="headerlink" title="被调用包"></a>被调用包</h1><p>被调用包首先自己编译要没有问题（这是肯定的），其次需要改一下CMakeLists文件</p><p>在catkin_package这一个命令中需要注释掉</p><pre><code>LIBRARIES $&#123;PROJECT_NAME&#125;</code></pre><p>这一条命令会让你在编译消息包是创建一个空的库，导致在需要调用的那个包中找不到这个消息包</p><h1 id="调用包"><a href="#调用包" class="headerlink" title="调用包"></a>调用包</h1><p>调用包需要更改CMakeLists和package</p><h2 id="CMakeLists"><a href="#CMakeLists" class="headerlink" title="CMakeLists"></a>CMakeLists</h2><p>find_package中需要添加消息包，直接添加消息包的名字就行</p><pre><code>find_package(catkin REQUIRED COMPONENTS    cv_bridge    image_transport    roscpp    rospy    std_msgs    geometry_msgs    line_vision ##这个是消息包    )</code></pre><blockquote><p>麻了，现在写笔记的时候才发现只需要加一个find_package，当时卡住的时候加了一堆乱七八糟的东西···</p></blockquote><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><p>加入两条依赖命令</p><pre><code>&lt;depend&gt;line_vision&lt;/depend&gt;&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</code></pre><p>第二条命令是自定消息时必须加的（虽然我也没试过不加这个）</p><p>line_vision就是消息包的名字</p><blockquote><p>万能的depend（）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cs笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ros </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cout.precision</title>
      <link href="/2022/08/05/cout-precision/"/>
      <url>/2022/08/05/cout-precision/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><h1 id="precision"><a href="#precision" class="headerlink" title="precision()"></a>precision()</h1><p>这是今天看书时发现的一个cout的方法</p><p>返回值为当前浮点数的精确位数，可以添加整型参数，如：</p><pre><code>cout.precision(3);</code></pre><p>这个操作就是将当前的浮点数精确度设置为小数点后三位</p>]]></content>
      
      
      <categories>
          
          <category> cs笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视觉SLAM</title>
      <link href="/2022/08/02/%E8%A7%86%E8%A7%89SLAM/"/>
      <url>/2022/08/02/%E8%A7%86%E8%A7%89SLAM/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><h2 id="SLAM学习日志"><a href="#SLAM学习日志" class="headerlink" title="SLAM学习日志"></a>SLAM学习日志</h2><blockquote><p>参考书籍为高翔《视觉SLAM十四讲》</p></blockquote><h3 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h3><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><p>首先引入点、向量和坐标系，这些在初高中已经学过了。之后引入了内积和<strong>外积</strong>，内积的结果是一个数字，外积的结果是一个与做外积运算的两向量相互垂直的向量</p><p>内积的运算可以写成这样：</p><pre><code>a·b = a(T)*b = |a|*|b|*cos&lt;a,b&gt;</code></pre><p><strong>外积</strong>的运算可以写成这样：</p><pre><code>a×b = a^b</code></pre><p>外积结果的大小为<code>a*b*sin&lt;a,b&gt;</code></p><p>tips:外积的具体运算方法可以参考《微积分（下）》</p><p><strong>外积</strong>运算可以表示旋转。对于一个向量来说，旋转后他的模的大小不变，改变的只有方向，而外积的大小则可以反映旋转的夹角的大小，所以通过一个旋转向量可以很轻松的算出旋转后的向量。</p><h4 id="坐标系的欧式变换"><a href="#坐标系的欧式变换" class="headerlink" title="坐标系的欧式变换"></a>坐标系的欧式变换</h4><p>在实际应用中，机器人的坐标系是移动的，当不将机器人的坐标系作为惯性系时，我们需要用到坐标转换。</p><p>在坐标转换时，我们通常使用一个变换矩阵<em><strong>T</strong></em></p><p>具体计算参考《线性代数》</p><p>变换矩阵为行列式为1的矩阵，所有行列式为1的矩阵都可以作为变换矩阵</p><h4 id="qr分解"><a href="#qr分解" class="headerlink" title="qr分解"></a>qr分解</h4><p>在高翔的《视觉slam十四讲》中，关于旋转矩阵，书上举了一个利用Eigen库解矩阵方程的例子。</p><p>在这里面使用到了直接求逆然后相乘的方法，然后还使用到了先对矩阵进行qr分解然后再解方程的方法</p><p>书上说qr解法速度会更快，然而我的虚拟机上基本都是直接求逆更快（楽）</p><p>之后查了一下，在矩阵大小大于100时，直接求取的速度不稳定，所以采用qr解法</p><p>实践后，资料正确</p><h3 id="旋转向量与欧拉角"><a href="#旋转向量与欧拉角" class="headerlink" title="旋转向量与欧拉角"></a>旋转向量与欧拉角</h3><h4 id="旋转向量"><a href="#旋转向量" class="headerlink" title="旋转向量"></a>旋转向量</h4><p>在上面描述外积的应用的时候，外积的大小与方向分别反映了旋转的角度与旋转轴</p><p>一次变换可能会涉及到旋转与平移，对于一个三维坐标系，旋转向量3维，平移向量也为3维，那么我们使用一个六维的向量即可表示一次变换</p><p>但是当我们要使用旋转向量时，我们需要先将其变为旋转矩阵，由旋转向量变为旋转矩阵的过程由罗德里格斯公式表示，详细公式可以在<a href="https://wuli.wiki/changed/RotA.html#:~:text=%E5%8F%AF%E7%94%A8%20%E7%BD%97%E5%BE%B7%E9%87%8C%E6%A0%BC%E6%96%AF%E6%97%8B%E8%BD%AC%E5%85%AC%E5%BC%8F%EF%BC%88Rodrigues%27%20rotation%20formula%EF%BC%89%20%E8%AE%A1%E7%AE%97%EF%BC%9A%20r%20%E2%80%B2%20%3D,%C3%97%20rsin%CE%B8%20%2B%20%CB%86A%28%CB%86A%20%E2%8B%85%20r%29%281%20%E2%88%92%20cos%CE%B8%29">这里</a>查看</p><h4 id="欧拉角"><a href="#欧拉角" class="headerlink" title="欧拉角"></a>欧拉角</h4><p>欧拉角是为了便于人们直观理解旋转过程而创造的，它将一次旋转分为分别绕当前XYZ轴旋转一次的三次旋转。我们将三次旋转用一个三维向量来表示。</p><p>[r,p,y]的旋转顺序为ZYX，其他顺序的旋转没有确切的名字</p><p>关于万向锁，其实就是九十度的旋转导致的两次旋转在绝对空间坐标系下旋转轴相同</p><h3 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h3><p>为了清晰且简洁地描述三个自由量地旋转，我们导入了四元数。</p><p>四元数是由一个实部和三个虚部构成的数。</p><p>四元数在参与运算之前通常会进行归一化处理，在编写程序时，已经存在的矩阵相关的库通常会有归一化函数</p><p>我对于四元数的理解有限，所以就不过多阐述了</p><h4 id="对于罗德里格斯公式以及四元数的深入理解"><a href="#对于罗德里格斯公式以及四元数的深入理解" class="headerlink" title="对于罗德里格斯公式以及四元数的深入理解"></a>对于罗德里格斯公式以及四元数的深入理解</h4><p>可以参考CSDN上的<a href="https://blog.csdn.net/q583956932/article/details/78933245">这篇文章</a>，以及知乎上的<a href="https://zhuanlan.zhihu.com/p/94853040">这篇文章</a></p>]]></content>
      
      
      <categories>
          
          <category> cs笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视觉SLAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git笔记(1)</title>
      <link href="/2022/07/31/git%E7%AC%94%E8%AE%B0-1/"/>
      <url>/2022/07/31/git%E7%AC%94%E8%AE%B0-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><pre><code>git init</code></pre><p>在你想创建仓库的目录下使用该命令，出现下面情况则成功</p><pre><code>Initialized empty Git repository in /Users/michael/learngit/.git/</code></pre><h2 id="添加文件到仓库"><a href="#添加文件到仓库" class="headerlink" title="添加文件到仓库"></a>添加文件到仓库</h2><pre><code>git add 文件名</code></pre><p>没有任何提示则成功</p><pre><code>git commit -m &quot;该次提交的说明&quot;</code></pre><p>该命令告诉git把文件提交到仓库，出现类似情况则成功</p><pre><code>[master (root-commit) eaadf4e] wrote a readme file1 file changed, 2 insertions(+)create mode 100644 readme.txt</code></pre><br><blockquote><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3></blockquote><p>当你使用<code>git commit</code>时它可能会告诉你</p><pre><code>Author identity unknown*** Please tell me who you are.</code></pre><p>这个时候你需要补充你的信息</p><pre><code>git config --global user.email &quot;你的邮箱&quot;git config --global user.name &quot;你的名字&quot;</code></pre><p>补充信息后，继续<code>git commit</code>即可通过</p><h2 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h2><pre><code>git status</code></pre><p>当仓库中文件内容与上一次提交不同时会提醒你哪一个文件不同</p><pre><code>git diff 文件名</code></pre><p>该命令可以查看文件中哪一部分与上次提交不同</p><p>使用<code>git diff</code>查看文件改动后再提交到仓库就不容易出现什么问题了</p><h2 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h2><pre><code>git log</code></pre><p>该命令会罗列出最近到最远的提交日志</p>]]></content>
      
      
      <categories>
          
          <category> cs笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
